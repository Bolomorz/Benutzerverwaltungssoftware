        internal static ReturnDialog<List<.>> Get.()
        {
            using var gm = new UserManagementContext();

            try
            {
                if(gm.s is null) return new(Message.FailedToCreateDatabase, null);

                return new(Message.Successful, await gm.s
                .ToList());
            }
            catch(Exception ex)
            {
                return new(new(MID.ErrorThrown, false, $"error in gm.Get: {ex.ToString()}"), null);
            }
        }
        internal static ReturnDialog<.> Get.(int .)
        {
            using var gm = new UserManagementContext();

            try
            {
                if(gm.s is null) return new(Message.FailedToCreateDatabase, null);

                var p = await gm.s
                .FirstOrDefault(x => x.PID == pid);

                return . is not null ? new(Message.Successful, .) : new(new(MID.NotFound, false, $"did not find object with id {.}"), null);
            }
            catch(Exception ex)
            {
                return new(new(MID.ErrorThrown, false, $"error in gm.Get: {ex.ToString()}"), null);
            }
        }
        internal static ReturnDialog Save.(, int? .)
        {
            using var gm = new UserManagementContext();
            using var transaction = await gm.Database.BeginTransaction(System.Data.IsolationLevel.RepeatableRead);

            try
            {
                if(gm.s is null) { transaction.Rollback(); return new(Message.FailedToCreateDatabase); }

                var . = . is not null ? gm.s.FirstOrDefault(x => x. == .) : null;

                if(. is null || . is null)
                {
                    await gm.s.Add(new()
                    {
                        . = ;
                    });
                } 
                else
                {
                    . = ;
                }

                gm.SaveChanges();

                transaction.Commit();

                return new(Message.Successful);
            }
            catch(Exception ex)
            {
                transaction.Rollback();
                return new(new(MID.ErrorThrown, false, $"error in gm.Save: {ex.ToString()}"));
            }
        }
        internal static ReturnDialog Delete.(int .)
        {
            using var gm = new UserManagementContext();
            using var transaction = gm.Database.BeginTransaction(System.Data.IsolationLevel.RepeatableRead);

            try
            {
                if(gm.s is null) { transaction.Rollback(); return new(Message.FailedToCreateDatabase); }

                var . = gm.s.FirstOrDefault(x => x. == .);
                if(. is not null) gm.s.Remove(old);

                gm.SaveChanges();

                transaction.Commit();

                return new(Message.Successful);
            }
            catch(Exception ex)
            {
                transaction.Rollback();
                return new(new(MID.ErrorThrown, false, $"error in gm.Delete: {ex.ToString()}"));
            }
        }